# This Travis job script has been generated by a script via
#
#   make_travis_yml_2.hs 'planetary.cabal'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: true  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

matrix:
  include:
    - compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}
    - compiler: "ghc-8.0.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}

before_install:
 - GO_IPFS_DIR="${TRAVIS_BUILD_DIR}/../go-ipfs"
 - GO_IPFS_ARCHIVE_BASENAME="go-ipfs_v0.4.9_linux-amd64.tar.gz"
 - GO_IPFS_ARCHIVE_FULLPATH="${GO_IPFS_DIR}/${GO_IPFS_ARCHIVE_BASENAME}"
 - GO_IPFS_CMD_BASENAME="ipfs"
 - GO_IPFS_CMD="${GO_IPFS_DIR}/go-ipfs/${GO_IPFS_CMD_BASENAME}"
 - HC=${CC}
 - unset CC
 - PATH=${GO_IPFS_DIR}/go-ipfs:/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$PATH
 - PKGNAME='planetary'

install:
 - cabal --version
 - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - BENCH=${BENCH---enable-benchmarks}
 - TEST=${TEST---enable-tests}
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - rm -fv cabal.project.local
 - rm -f cabal.project.freeze
 - cabal new-build -w ${HC} ${TEST} ${BENCH} --dep -j2 all
 - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --dep -j2 all
 - |
   if [ -e "${GO_IPFS_ARCHIVE_FULLPATH}" ] ; then
     echo "${GO_IPFS_ARCHIVE_FULLPATH} exists, not downloading"
   else
     echo "${GO_IPFS_ARCHIVE_FULLPATH} does not exist, downloading"
     mkdir -p "${GO_IPFS_DIR}"
     travis_retry wget --quiet -O "${GO_IPFS_ARCHIVE_FULLPATH}" "https://ipfs.io/ipns/dist.ipfs.io/go-ipfs/v0.4.9/${GO_IPFS_ARCHIVE_BASENAME}"
   fi
 - |
   if [ -x "${GO_IPFS_CMD}" ] ; then
     echo "${GO_IPFS_CMD} is present, not extracting"
   else
     echo "${GO_IPFS_CMD} is not present, extracting"
     tar -C "${GO_IPFS_DIR}" -vzxf "${GO_IPFS_ARCHIVE_FULLPATH}"
   fi
 - ipfs init

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - rm -rf dist/
 - cabal sdist # test that a source-distribution can be generated
 - cd dist/
 - SRCTAR=(${PKGNAME}-*.tar.gz)
 - SRC_BASENAME="${SRCTAR/%.tar.gz}"
 - tar -xvf "./$SRC_BASENAME.tar.gz"
 - cd "$SRC_BASENAME/"
## from here on, CWD is inside the extracted source-tarball
 - rm -fv cabal.project.local
 # this builds all libraries and executables (without tests/benchmarks)
 - rm -f cabal.project.freeze
 - echo "cabal new-build -w ${HC} ${TEST} ${BENCH} --dep -j2 all"
 - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all
 # this builds all libraries and executables (including tests/benchmarks)
 # - rm -rf ./dist-newstyle

 # build & run tests
 - cabal new-build -w ${HC} ${TEST} ${BENCH} all
 - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} all; fi
 - wget https://raw.github.com/ndmitchell/hlint/master/misc/travis.sh -O - --quiet | sh -s src

# EOF
